name: "Build and Release"

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]
  workflow_dispatch:

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  build:
    name: Build Executable
    runs-on: windows-latest
    timeout-minutes: 60

    steps:
      # 检出代码
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: recursive  # 确保子模块被正确检出

      # 设置 MSYS2 环境并安装依赖
      - name: Setup MSYS2 and Install Dependencies
        uses: msys2/setup-msys2@v2
        with:
          msystem: ucrt64
          update: true
          install: >-
            base-devel
            git
            mingw-w64-ucrt-x86_64-cmake
            mingw-w64-ucrt-x86_64-gcc
            mingw-w64-ucrt-x86_64-boost
            mingw-w64-ucrt-x86_64-curl
            mingw-w64-ucrt-x86_64-openssl
            mingw-w64-ucrt-x86_64-nlohmann-json
            mingw-w64-ucrt-x86_64-miniupnpc
            mingw-w64-ucrt-x86_64-toolchain

      # 验证 Git 是否安装成功
      - name: Verify Git Installation
        shell: msys2 {0}
        run: |
          git --version

      # 安装 MinHook
      - name: Install MinHook
        shell: msys2 {0}
        run: |
          git clone https://github.com/TsudaKageyu/minhook.git
          cd minhook
          mkdir build
          cd build
          cmake -G "MinGW Makefiles" ..
          mingw32-make
          cp libMinHook.a /usr/local/lib/
          cp ../include/MinHook.h /usr/local/include/

      # 构建项目
      - name: Build Project
        shell: msys2 {0}
        run: |
          mkdir build
          cd build
          cmake -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release ..
          mingw32-make -j$(nproc)

      # 打包可执行文件
      - name: Package Executable
        shell: msys2 {0}
        run: |
          mkdir -p artifacts
          cp ./build/your_executable.exe ./artifacts/your_executable.exe

      # 上传构建产物
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: executable
          path: artifacts/

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      # 创建或更新 GitHub Release
      - name: Create/Update GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          name: "Release ${{ github.ref_name }}"
          body: |
            This release includes:
            - The latest build of the project.
          draft: false
          prerelease: false
          artifacts: artifacts/your_executable.exe
          token: ${{ secrets.GITHUB_TOKEN }}
